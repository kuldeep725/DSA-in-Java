import java.util.Scanner;

public class AlmostAcyclicGraph {
	
	private static int count = 1;

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		int V = sc.nextInt();
		int E = sc.nextInt();
		int backEdge = 0;
		int symmetric = 0;
//		int symmetricFlag = 0;
		int symmetricV = 0;
		int symmetricW = 0;
		int count = 0;
		int[] backEdgeArray  =  new int[V+1];
		int[] endVertex = new int[V+1];
		int[] parent = new int[V+1];
		int[][] a = new int[V+1][V+1];
		int marked[]  = new int[V+1];
		
		for(int i = 1; i <= E; i++) {
			int v = sc.nextInt();
			int w = sc.nextInt();
			a[v][w] = 1;
//			if(marked[w] == 1) {
//				backEdgeArray[count] = v;
//				endVertex[count]  = w;
//				count++;
//				backEdge++;
//			}
//			if(a[w][v] == 1) {
//				symmetric++;
//				symmetricV = v;
//				symmetricW = w;
//			}
//			if(symmetric > 1) {
//				symmetricFlag = 1;
//				break;
//			}
//			if(parent[w] == 0) {
//				parent[w] = v;
//			}
//			
//			a[v][w]  = 1;
//			marked[v] = 1;
//			marked[w] = 1;
		}
		int [] pre = new int[V+1];
		int [] post = new int[V+1];
		for(int i = 1; i <=V; i++) 
			if(marked[i] == 0) 	dfs(a, i, V,  marked, pre, post, parent);
		
		for(int i = 1; i <=V; i++) {
			for (int j= 1; j  <=V; j++) {
				if(a[i][j] == 1 & pre[j] < pre[i] && post[i] < post[j]) {
					backEdgeArray[count] = i;
					endVertex[count]  = j;
					count++;
					backEdge++;
					if(a[j][i] == 1) {
						symmetric++;
						symmetricV = i;
						symmetricW = j;
					}
					if(symmetric > 1) {
						System.out.println("NO");
						sc.close();
						return;
					}
				}
			}
		}
		System.out.println("Number of backEdge = "+backEdge);
//		System.out.println("symmetricV = "+symmetricV);
//		System.out.println("symmetricW = "+symmetricW);
		if(backEdge <= 1) {
//			System.out.println("backEdge <= 1");
			System.out.println("YES");
		}
//		else if(symmetricFlag == 1) {
////			System.out.println("symmetricFlag == 1");
//			System.out.println("NO");
//		}
		else if(symmetric == 1){
//			System.out.println("symmetric == 1");
			int flagAns = 0;
			for(int i = 0; i < backEdge; i++) {
				int flag = 0;
				for(int w = backEdgeArray[i]; w != endVertex[i]; w = parent[w]) {
//					System.out.println("endVertex["+i+"] = "+endVertex[i]);
//					System.out.println("for "+"("+w+","+parent[w]+")");
					if(w == symmetricV && parent[w] == symmetricW) {
//						System.out.println("flag == 1");
						flag = 1;
//						break;
					}
				}
				if(flag == 0) {
//					System.out.println("flag == 0");
					flagAns = 1;
					break;
				}
			}
			if(flagAns == 1) {
//				System.out.println("flagAns == 1");
				System.out.println("NO");
			}
			else {
//				System.out.println("flagAns == 0");
				System.out.println("YES");
			}
		}
		else {
			if(backEdge == 2) {
				int checked[][] = new int[V+1][V+1];
				for(int i = 0; i < backEdge; i++) {
					int flag = 0;
					for(int  w = backEdgeArray[i]; w != endVertex[i]; w = parent[w]) {
//						System.out.println("endVertex["+i+"] = "+endVertex[i]);
//						System.out.println("for "+"("+w+","+parent[w]+")");
						if(checked[parent[w]][w] == 1){
							flag = 1;
//							System.out.println("YES");
//							sc.close();
//							return;
						}
						checked[parent[w]][w] = 1;
					}
					if(checked[backEdgeArray[i]][endVertex[i]] == 1) {
						flag = 1;
//						System.out.println("YES");
//						sc.close();
//						return;
					}
					checked[backEdgeArray[i]][endVertex[i]] = 1;
					if(i >= 1 && flag == 0) {
						System.out.println("NO");
						sc.close();
						return;
					}
				}
				System.out.println("YES");
				
			}
			else {
//				System.out.println("Otherwise");
				System.out.println("NO");
			}
			
		}
		sc.close();
		
	}

	private static void dfs(int[][] a,int v,  int n, int[] marked, int[] pre, int[] post, int[] parent) {
		
		marked[v] = 1;
		pre[v] = count++;
//		System.out.print(v+" ");
//		System.out.println("v  = "+v+" started");
		for(int j = 1; j <= n; j++) {
			if(marked[j] == 0 && a[v][j] == 1) {
				parent[j] = v;
				dfs(a, j, n, marked, pre, post, parent);
			}
		}
//		System.out.println("v  = "+v+" ended");
		post[v] = count++;
	}

}
