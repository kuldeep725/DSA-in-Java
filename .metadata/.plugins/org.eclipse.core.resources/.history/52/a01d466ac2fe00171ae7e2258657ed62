import java.util.Scanner;

public class AlmostAcyclicGraph {
	
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		int V = sc.nextInt();
		int E = sc.nextInt();
		int backEdge = 0;
		int symmetric = 0;
		int symmetricFlag = 0;
		int symmetricV = 0;
		int symmetricW = 0;
		int count = 0;
		int[] backEdgeArray  =  new int[V+1];
		int[] endVertex = new int[V+1];
		int[] parent = new int[V+1];
		int[][] a = new int[V+1][V+1];
		int marked[]  = new int[V+1];
		
		for(int i = 1; i <= E; i++) {
			int v = sc.nextInt();
			int w = sc.nextInt();
			if(marked[w] == 1) {
				backEdgeArray[count] = v;
				endVertex[count]  = w;
				count++;
				backEdge++;
			}
			if(a[w][v] == 1) {
				symmetric++;
				symmetricV = v;
				symmetricW = w;
			}
			if(symmetric > 1) {
				symmetricFlag = 1;
				break;
			}
			parent[w] = v;
			a[v][w]  = 1;
			marked[v] = 1;
			marked[w] = 1;
		}
		System.out.println("Number of backEdge = "+backEdge);
		if(backEdge <= 1) {
			System.out.println("backEdge <= 1");
			System.out.println("YES");
		}
		else if(symmetricFlag == 1) {
			System.out.println("symmetricFlag == 1");
			System.out.println("NO");
		}
		else if(symmetric == 1){
			System.out.println("symmetric == 1");
			int flagAns = 0;
			for(int i = 0; i < backEdge; i++) {
				int flag = 0;
				for(int w = backEdgeArray[i]; w != endVertex[i]; w = parent[w]) {
					System.out.println("for "+w);
					if(w == symmetricW && parent[w] == symmetricV) {
						System.out.println("flag == 1");
						flag = 1;
					}
				}
				if(flag == 0) {
					flagAns = 1;
					break;
				}
			}
			if(flagAns == 1) {
				System.out.println("NO");
			}
			else {
				System.out.println("YES");
			}
		}
		else {
			System.out.println("Otherwise");
			System.out.println("NO");
		}
		sc.close();
		
	}

}
